/*
<metadata description="Unitary Fingerboard">
</metadata>
*/

void touchStart (int index, float x, float y, float z, float vz)
{
   drawTouch(x, y, z);

}

void touchMove (int index, float x, float y, float z, float vz)
{
   drawTouch(x, y, z);
}

void drawTouch (float touchX, float touchY, float z) {
    int x = int(map(touchX, 0.0, 2.0, 0.0, 16.0));
    int y = int(map(touchY, 0.0, 2.0, 0.0, 16.0));
    int pressureRange_0_127 = int(map(z, 0.0, 1.0, 0.0, 127.0));
    int pressure_argb_color = makeARGB(pressureRange_0_127 * 2, 0, 0, 255);
    fillRect (0x00000000, x, y, 1, 1);
    blendRect (pressure_argb_color, x, y, 1, 1);

    log(pressureRange_0_127);
    sendMIDI(0xA0 + y, x, pressureRange_0_127);

    // Based upon pressure, draw on surrounding pixels
    if (x > 0) {
        fillRect (0x00000000, x - 1, y, 1, 1);
        blendRect (pressure_argb_color, x - 1, y, 1, 1);
        sendMIDI(0xA0 + y, x - 1, pressureRange_0_127);
    }
    if (x < 15) {
        fillRect (0x00000000, x - 1, y, 1, 1);
        blendRect (pressure_argb_color, x - 1, y, 1, 1);
        sendMIDI(0xA0 + y, x + 1, pressureRange_0_127);
    }
    if (y > 0) {
        fillRect (0x00000000, x, y - 1, 1, 1);
        blendRect (pressure_argb_color, x, y - 1, 1, 1);
        sendMIDI(0xA0 + (y - 1), x, pressureRange_0_127);
    }
    if (y < 15) {
        fillRect (0x00000000, x, y + 1, 1, 1);
        blendRect (pressure_argb_color, x, y + 1, 1, 1);
        sendMIDI(0xA0 + (y + 1), x, pressureRange_0_127);
    }

}

void repaint()
{
    // clearDisplay();
}

void handleMIDI (int byte0, int byte1, int byte2)
{
    log(byte0);
    log(byte1);
    log(byte2);

    if (byte0 == 0x90) {
        sendNoteOn  (0, byte1, byte2);
    }
    else if ((byte0 & 0xF0) == 0xA0) {
        if ((byte0 & 0x0F) == 0) {
            // Display incoming pitch
            blendRect (0xFFFFFFFF, byte2, byte1, 1, 1);
        }
    }
    else if ((byte0 & 0xF0) == 0xB0) {
        // Display incoming unitary matrix probabilies
        int y = byte0 & 0x0F;
        int x = byte1;
        int prob_argb_color = makeARGB(byte2, 0, 255, 0);
        fillRect (0x00000000, x, y, 1, 1);
        blendRect (prob_argb_color, x, y, 1, 1);
    }
    else if ((byte0 & 0xF0) == 0xC0) {
        if ((byte0 & 0x0F) == 0) {
            // Clear the display
            clearDisplay();
        }
    }
}

void handleButtonDown (int index)
{
    clearDisplay();

    // Tell app to optimize rotations
    sendMIDI(0xB0, 0, 0);
}

